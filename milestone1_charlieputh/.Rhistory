pkgs <- c("Rspotify", "spotifyr", "httpuv", "ggridges", "highcharter", "knitr",
"tm", "tidyverse", "igraph", "ggplot2", "stringr", "scales")
lapply(pkgs, library, character.only = TRUE)
options(httr_oauth_cache = TRUE)
app_id <- "8fee083e5ddc41948dc9836b9444c0fb"
app_secret <- "3c36b666d22349ceb33660ae50cf06a6"
token <- "1"
keys <- spotifyOAuth(token, app_id, app_secret)
Sys.setenv(SPOTIFY_CLIENT_ID = app_id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = app_secret)
access_token <- get_spotify_access_token()
keyword <- "Charlie+Puth"
# Retrieve artist by keyword
findArtist <- searchArtist(keyword, token=keys)
# Retrieve information about artist
charlie_puth <- getArtistinfo(findArtist$id[1], token=keys)
View(findArtist)
View(charlie_puth)
charlie_puth.album <- getAlbums(findArtist$id[1], token=keys)
View(charlie_puth.album)
album.songs <- getAlbum(charlie_puth.album$id[1], token=keys)
View(album.songs)
song <- getFeatures(album.songs$id[1], token=keys)
View(song)
charlieputh <- get_artist_audio_features('charlie puth')
View(charlieputh)
view(charlieputh)
charlieputh %>%
arrange(-valence) %>%
select(track_name, artist_name, valence) %>%
head(10) %>%
kable()
ggplot(charlieputh, aes(x = valence, y= album_name)) +
geom_density_ridges() +
theme_ridges() +
ggtitle("Plot of Charlie Puth' Joy Distributions",
subtitle = "Based on valence from Spotify's Web API")
related <- getRelated('charlie puth', token=keys)
View(related)
View(album.songs)
View(album.songs)
View(charlie_puth)
View(charlie_puth.album)
View(charlieputh)
View(findArtist)
View(related)
View(song)
View(album.songs)
View(charlieputh)
topsongs <- getPlaylistSongs("spotify", "6VuMaDnrHyPL1p4EHjYLi7", token=keys)
View(findArtist)
topsongs <- getPlaylistSongs("charlie puth", "6VuMaDnrHyPL1p4EHjYLi7", token=keys)
topsongs <- getPlaylistSongs("Charlie Puth", "6VuMaDnrHyPL1p4EHjYLi7", token=keys)
topsongs <- getPlaylistSongs("spotify", "4hOKQuZbraPDIfaGbM3lKI", token=keys)
View(topsongs)
View(topsongs)
View(related)
edges <- c()
for (artist in related$name){
related <- getRelated(artist, token=keys)
for (relatedartist in related$name){
edges <- append(edges, artist)
edges <- append(edges, relatedartist)
}
}
g_spotify_charlie <- graph(edges)
write.graph(g_spotify_charlie, "g_spotify_charlie.graphml", format="graphml")
pkgs <- c("devtools","vosonSML","magrittr","tm","igraph","stringr")
lapply(pkgs, library, character.only = TRUE)
appname <- "twitter"
my_api_key <- "aOqLz9bD1ZO8sSsMSRFqdm9wG"
my_api_secret <- "gneL08mAWZBb4upNBpfoq3I0F0vJwkYHOpW13mQX6cEHAmWeSC"
my_access_token <- "1040713787592998912-mYmj6XerRPh11hBVDL2KY2oDNBKV0E"
my_access_token_secret <- "REmQJhL3QLOKXLdO1uLhEKLbOKQjqbXh8CsrbQDFsozGc"
charlieTwitterData <- Authenticate("twitter",
appName= appname,
apiKey=my_api_key,
apiSecret=my_api_secret,
accessToken=my_access_token,
accessTokenSecret=my_access_token_secret,
useCachedToken = F) %>%
Collect(searchTerm="#charlieputh", language="en", numTweets=1000, writeToFile=TRUE)
View(charlieTwitterData)
related <- getRelated('charlie puth', token=keys)
view(related)
related <- getRelated('charlie puth', token=keys)
pkgs <- c("Rspotify", "spotifyr", "httpuv", "ggridges", "highcharter", "knitr",
"tm", "tidyverse", "igraph", "ggplot2", "stringr", "scales")
lapply(pkgs, library, character.only = TRUE)
options(httr_oauth_cache = TRUE)
app_id <- "8fee083e5ddc41948dc9836b9444c0fb"
app_secret <- "3c36b666d22349ceb33660ae50cf06a6"
token <- "1"
keys <- spotifyOAuth(token, app_id, app_secret)
Sys.setenv(SPOTIFY_CLIENT_ID = app_id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = app_secret)
access_token <- get_spotify_access_token()
# Charlie Puth
keyword <- "Charlie+Puth"
# Retrieve artist by keyword
findArtist <- searchArtist(keyword, token=keys)
# Retrieve information about artist
charlie_puth <- getArtistinfo(findArtist$id[1], token=keys)
# Retrieve albums of that artist
charlie_puth.album <- getAlbums(findArtist$id[1], token=keys)
# Retrieve information on songs from that ablum
album.songs <- getAlbum(charlie_puth.album$id[1], token=keys)
# Retrieve information on a specific song on that album
song <- getFeatures(album.songs$id[1], token=keys)
# Charlie Puth Example
charlieputh <- get_artist_audio_features('charlie puth')
view(charlieputh)
# Get happiest songs from the Charlie Puth (If the '-' symbol does not preceed valence, we sort tracks in ascending rather than descending order)
charlieputh %>%
arrange(-valence) %>%
select(track_name, artist_name, valence) %>%
head(10) %>%
kable()
# Plot Valence Scores for Every Album
ggplot(charlieputh, aes(x = valence, y= album_name)) +
geom_density_ridges() +
theme_ridges() +
ggtitle("Plot of Charlie Puth' Joy Distributions",
subtitle = "Based on valence from Spotify's Web API")
# Charlie Puth Relationship Example
related <- getRelated('charlie puth', token=keys)
View(related)
View(charlieputh)
View(charlieputh)
View(charlie_puth)
View(charlie_puth.album)
View(album.songs)
pkgs <- c("devtools","vosonSML","magrittr","tm","igraph","stringr")
lapply(pkgs, library, character.only = TRUE)
appname <- "twitter"
my_api_key <- "aOqLz9bD1ZO8sSsMSRFqdm9wG"
my_api_secret <- "gneL08mAWZBb4upNBpfoq3I0F0vJwkYHOpW13mQX6cEHAmWeSC"
my_access_token <- "1040713787592998912-mYmj6XerRPh11hBVDL2KY2oDNBKV0E"
my_access_token_secret <- "REmQJhL3QLOKXLdO1uLhEKLbOKQjqbXh8CsrbQDFsozGc"
charlieTwitterData <- Authenticate("twitter",
appName= appname,
apiKey=my_api_key,
apiSecret=my_api_secret,
accessToken=my_access_token,
accessTokenSecret=my_access_token_secret,
useCachedToken = F) %>%
Collect(searchTerm="#charlieputh", language="en", numTweets=1000, writeToFile=TRUE)
View(charlieTwitterData)
g_twitter_actor <- charlieTwitterData %>% Create("actor")
V(g_twitter_actor$graph)$name <- V(g_twitter_actor$graph)$screen_name
write.graph(g_twitter_actor$graph, "CharlieTwitterActor.graphml", format="graphml")
pageRank_charlie_actor <- sort(page.rank(g_twitter_actor$graph)$vector, decreasing=TRUE)
head(pageRank_charlie_actor, n=5)
g_twitter_semantic <- charlieTwitterData %>% Create("semantic", stopwordsEnglish = T)
write.graph(g_twitter_semantic$graph, "CharlieTwitterSemantic.graphml", format="graphml")
pageRank_charlie_semantic <- sort(page_rank(g_twitter_semantic$graph)$vector, decreasing=TRUE)
head(pageRank_charlie_semantic, n=10)
count(charlieTwitterData[which(charlieTwitterData$is_retweet == FALSE)])
count(charlieTwitterData[which(charlieTwitterData$is_retweet == FALSE),])
View(related)
View(related)
charlieputh %>%
arrange(-valence) %>%
select(track_name, artist_name, valence) %>%
head(10) %>%
kable()
charlieputh <- get_artist_audio_features('charlie puth')
view(charlieputh)
# Get happiest songs from the Charlie Puth (If the '-' symbol does not preceed valence, we sort tracks in ascending rather than descending order)
charlieputh %>%
arrange(-valence) %>%
select(track_name, artist_name, valence) %>%
head(10) %>%
kable()
charlieputh %>%
arrange(-valence) %>%
select(track_name, artist_name, valence) %>%
head(10) %>%
kable()
# Plot Valence Scores for Every Album
ggplot(charlieputh, aes(x = valence, y= album_name)) +
geom_density_ridges() +
theme_ridges() +
ggtitle("Plot of Charlie Puth' Joy Distributions",
subtitle = "Based on valence from Spotify's Web API")
app_id <- "8fee083e5ddc41948dc9836b9444c0fb"
app_secret <- "3c36b666d22349ceb33660ae50cf06a6"
token <- "1"
charlieputh %>%
arrange(-valence) %>%
select(track_name, artist_name, valence) %>%
head(10) %>%
kable()
charlieputh <- get_artist_audio_features('charlie puth')
view(charlieputh)
pkgs <- c("Rspotify", "spotifyr", "httpuv", "ggridges", "highcharter", "knitr",
"tm", "tidyverse", "igraph", "ggplot2", "stringr", "scales")
lapply(pkgs, library, character.only = TRUE)
options(httr_oauth_cache = TRUE)
charlieputh %>%
arrange(-valence) %>%
select(track_name, artist_name, valence) %>%
head(10) %>%
kable()
View(charlieTwitterData)
ggplot(charlieputh, aes(x = valence, y= album_name)) +
geom_density_ridges() +
theme_ridges() +
ggtitle("Plot of Charlie Puth' Joy Distributions",
subtitle = "Based on valence from Spotify's Web API")
pkgs <- c("Rspotify", "spotifyr", "httpuv", "ggridges", "highcharter", "knitr",
"tm", "tidyverse", "igraph", "ggplot2", "stringr", "scales")
lapply(pkgs, library, character.only = TRUE)
options(httr_oauth_cache = TRUE)
# Plot Valence Scores for Every Album
ggplot(charlieputh, aes(x = valence, y= album_name)) +
geom_density_ridges() +
theme_ridges() +
ggtitle("Plot of Charlie Puth' Joy Distributions",
subtitle = "Based on valence from Spotify's Web API")
View(charlieputh)
charlieputh
charlieputh %>%
arrange(-valence) %>%
select(track_name, artist_name, valence) %>%
head(10) %>%
kable()
pkgs <- c("Rspotify", "spotifyr", "httpuv", "ggridges", "highcharter", "knitr",
"tm", "tidyverse", "igraph", "ggplot2", "stringr", "scales")
lapply(pkgs, library, character.only = TRUE)
options(httr_oauth_cache = TRUE)
# Get happiest songs from the Charlie Puth (If the '-' symbol does not preceed valence, we sort tracks in ascending rather than descending order)
charlieputh %>%
arrange(-valence) %>%
select(track_name, artist_name, valence) %>%
head(10) %>%
kable()
save.image("D:/4030BigData/milestone1charlieputh/milestone1s5148464.RData")
load("D:/4030BigData/milestone1charlieputh/milestone1s5148464.RData")
load("D:/4030BigData/milestone1charlieputh/.RData")
View(charlie_puth)
View(charlie_puth.album)
View(charlieputh)
View(charlieTwitterData)
View(song)
View(charlieputh)
View(charlie_puth)
View(charlie_puth.album)
View(charlieTwitterData)
View(album.songs)
album.songs2 <- getAlbum(charlie_puth.album$id[2], token=keys)
pkgs <- c("Rspotify", "spotifyr", "httpuv", "ggridges", "highcharter", "knitr",
"tm", "tidyverse", "igraph", "ggplot2", "stringr", "scales")
lapply(pkgs, library, character.only = TRUE)
options(httr_oauth_cache = TRUE)
album.songs2 <- getAlbum(charlie_puth.album$id[2], token=keys)
app_id <- "8fee083e5ddc41948dc9836b9444c0fb"
app_secret <- "3c36b666d22349ceb33660ae50cf06a6"
token <- "1"
keys <- spotifyOAuth(token, app_id, app_secret)
######1.3 Data retrieval
# Charlie Puth
keyword <- "Charlie+Puth"
View(album.songs2)
album.songs3 <- getAlbum(charlie_puth.album$id[3], token=keys)
View(album.songs)
View(album.songs2)
View(album.songs3)
View(charlie_puth)
View(charlie_puth.album)
View(charlieputh)
View(charlieputh)
View(g_twitter_actor)
View(charlie_puth)
View(charlie_puth.album)
View(charlie_puth)
View(charlie_puth)
View(charlieputh)
View(charlieTwitterData)
View(charlieputh)
View(charlieputh)
View(charlie_puth.album)
View(findArtist)
View(charlieTwitterData)
View(findArtist)
View(g_twitter_actor)
View(g_twitter_actor)
View(charlieputh)
View(charlieTwitterData)
View(charlie_puth)
View(charlieputh)
View(charlieTwitterData)
View(song)
View(related)
load("D:/4030BigData/milestone1charlieputh/.RData")
pkgs <- c("devtools","vosonSML","magrittr","tm","igraph","stringr")
lapply(pkgs, library, character.only = TRUE)
appname <- "twitter"
my_api_key <- "aOqLz9bD1ZO8sSsMSRFqdm9wG"
my_api_secret <- "gneL08mAWZBb4upNBpfoq3I0F0vJwkYHOpW13mQX6cEHAmWeSC"
my_access_token <- "1040713787592998912-mYmj6XerRPh11hBVDL2KY2oDNBKV0E"
my_access_token_secret <- "REmQJhL3QLOKXLdO1uLhEKLbOKQjqbXh8CsrbQDFsozGc"
count(charlieTwitterData[which(charlieTwitterData$is_retweet == FALSE),])
charlieTwitterData <- Authenticate("twitter",
appName= appname,
apiKey=my_api_key,
apiSecret=my_api_secret,
accessToken=my_access_token,
accessTokenSecret=my_access_token_secret,
useCachedToken = F) %>%
count(charlieTwitterData[which(charlieTwitterData$is_retweet == FALSE),])
Collect(searchTerm="#charlieputh", language="en", numTweets=1000, writeToFile=TRUE)
count(charlieTwitterData[which(charlieTwitterData$is_retweet == FALSE),])
View(charlieTwitterData)
count(charlieTwitterData[which(charlieTwitterData$is_retweet == FALSE),])
View(charlieTwitterData)
pageRank_charlie_actor <- sort(page.rank(g_twitter_actor$graph)$vector, decreasing=TRUE)
head(pageRank_charlie_actor, n=5)
pageRank_charlie_semantic <- sort(page_rank(g_twitter_semantic$graph)$vector, decreasing=TRUE)
head(pageRank_charlie_semantic, n=10)
count(charlieTwitterData[which(charlieTwitterData$is_retweet == FALSE),])
count(charlieTwitterData[which(charlieTwitterData$is_retweet == FALSE),])
count(charlieTwitterData[which(charlieTwitterData$is_retweet == FALSE), ])
count(charlieTwitterData[which(charlieTwitterData$is_retweet == FALSE), ])
count(charlieTwitterData[which(charlieTwitterData$is_retweet == FALSE), ])
count(charlieTwitterData[which(charlieTwitterData$is_retweet == FALSE), ])
library(plyr)
count(charlieTwitterData[which(charlieTwitterData$is_retweet == FALSE),])
detach("package:plyr", unload = TRUE)
count(charlieTwitterData[which(charlieTwitterData$is_retweet == FALSE),])
pkgs <- c("devtools","vosonSML","magrittr","tm","igraph","stringr")
lapply(pkgs, library, character.only = TRUE)
appname <- "twitter"
my_api_key <- "aOqLz9bD1ZO8sSsMSRFqdm9wG"
my_api_secret <- "gneL08mAWZBb4upNBpfoq3I0F0vJwkYHOpW13mQX6cEHAmWeSC"
my_access_token <- "1040713787592998912-mYmj6XerRPh11hBVDL2KY2oDNBKV0E"
my_access_token_secret <- "REmQJhL3QLOKXLdO1uLhEKLbOKQjqbXh8CsrbQDFsozGc"
charlieTwitterData <- Authenticate("twitter",
appName= appname,
apiKey=my_api_key,
apiSecret=my_api_secret,
accessToken=my_access_token,
accessTokenSecret=my_access_token_secret,
useCachedToken = F) %>%
count(charlieTwitterData[which(charlieTwitterData$is_retweet == FALSE),])
pageRank_charlie_actor <- sort(page.rank(g_twitter_actor$graph)$vector, decreasing=TRUE)
head(pageRank_charlie_actor, n=5)
library(devtools)
count(charlieTwitterData[which(charlieTwitterData$is_retweet == FALSE),])
count(charlieTwitterData[which(charlieTwitterData$isRetweet == FALSE),])
count(charlieTwitterData[which(charlieTwitterData$is_retweet == FALSE),])
View(charlieTwitterData)
Collect(searchTerm="#charlieputh", language="en", numTweets=1000, writeToFile=TRUE)
View(charlieTwitterData)
g_twitter_actor <- charlieTwitterData %>% Create("actor")
V(g_twitter_actor$graph)$name <- V(g_twitter_actor$graph)$screen_name
write.graph(g_twitter_actor$graph, "CharlieTwitterActor.graphml", format="graphml")
pageRank_charlie_actor <- sort(page.rank(g_twitter_actor$graph)$vector, decreasing=TRUE)
head(pageRank_charlie_actor, n=5)
count(charlieTwitterData[which(charlieTwitterData$is_retweet == FALSE),])
youtube <- readRDS("E:/Griffith University/4030BigData/milestone2_charlieputh/youtube.rds")
