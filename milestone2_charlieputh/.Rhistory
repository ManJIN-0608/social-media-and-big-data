# Get connected components
cc <- clusters(attention_twitter_bimodal)
cc$no
# Get subnetwork with most members
max(cc$csize)
attention_twitter_bimodal_sub <- induced_subgraph(attention_twitter_bimodal,
which(cc$membership == which.max(cc$csize)))
# Get in-degrees for each node (hashtag)
ind <- strength(attention_twitter_bimodal_sub, mode="in")
# Get out-degrees for each node (user)
oud <- strength(attention_twitter_bimodal_sub, mode="out")
# Display top 20 items from the subgraph ordered by in-degree and out-degree
V(attention_twitter_bimodal_sub)[order(ind, decreasing=TRUE)[1:15]]
V(attention_twitter_bimodal_sub)[order(oud, decreasing=TRUE)[1:15]]
# Centrality Measurement based on user-hashtag relationship (degree)
sort(degree(attention_twitter_bimodal_sub, mode="in"), decreasing=TRUE)[1:20]
sort(degree(attention_twitter_bimodal_sub, mode="out"), decreasing=TRUE)[1:20]
sort(closeness(attention_twitter_bimodal_sub), decreasing=FALSE)[1:20]
sort(closeness(attention_twitter_bimodal_sub), decreasing=TRUE)[1:20]
sort(betweenness(attention_twitter_bimodal_sub, directed = FALSE), decreasing=TRUE)[1:20]
load("C:/Users/s5148464/Desktop/milestone2_charlieputh/.RData")
load("C:/Users/s5148464/Desktop/milestone2_charlieputh/.RData")
View(attention_twitter_bimodal)
View(attention_twitter_bimodal_sub)
View(attentionTwitterData)
pkgs <- c('igraph', 'magrittr', 'tuber', 'Rspotify', 'vosonSML')
lapply(pkgs, library, character.only = TRUE)
# Youtube API Credentials and Authenticate
apiKey <- 'AIzaSyC7X31Uj8_xPnE8whKL-MoPMVqg14ap_Jg'
appID <- '597183295495-770rn2a1n9i7f3nt4kdtkbt2i47ivr96.apps.googleusercontent.com'
appSecret <- 'C2jeBjDQKZ5CChavf4LFSiC6'
yt_oauth(appID, appSecret)
View(searchResult)
videoIDs <- as.vector(searchResult$video_id[1:10])
videoState = lapply(videoIDs, function(x){
get_stats(video_id = x)
})
videoState = do.call(rbind.data.frame, videoState)
pkgs <- c('igraph', 'magrittr', 'tuber', 'Rspotify', 'vosonSML')
lapply(pkgs, library, character.only = TRUE)
# Youtube API Credentials and Authenticate
apiKey <- 'AIzaSyC7X31Uj8_xPnE8whKL-MoPMVqg14ap_Jg'
appID <- '597183295495-770rn2a1n9i7f3nt4kdtkbt2i47ivr96.apps.googleusercontent.com'
appSecret <- 'C2jeBjDQKZ5CChavf4LFSiC6'
yt_oauth(appID, appSecret)
pkgs <- c('igraph', 'magrittr', 'tuber', 'Rspotify', 'vosonSML')
lapply(pkgs, library, character.only = TRUE)
# Youtube API Credentials and Authenticate
apiKey <- 'AIzaSyC7X31Uj8_xPnE8whKL-MoPMVqg14ap_Jg'
appID <- '597183295495-770rn2a1n9i7f3nt4kdtkbt2i47ivr96.apps.googleusercontent.com'
appSecret <- 'C2jeBjDQKZ5CChavf4LFSiC6'
yt_oauth(appID, appSecret)
searchResult <- yt_search("charlie puth")
View(searchResult)
# Create Actor nework
# Get first 10 video from the search results
#####   2.1) YouTube views/likes
videoIDs <- as.vector(searchResult$video_id[1:10])
videoState = lapply(videoIDs, function(x){
get_stats(video_id = x)
})
videoState = do.call(rbind.data.frame, videoState)
g_youtube_actor <- Authenticate("youtube", apiKey= apiKey) %>%
Collect(videoIDs = videoIDs, writeToFile=TRUE, verbose=TRUE, maxComments = 500)
View(g_youtube_actor)
youtubeActor <- g_youtube_actor %>% Create("actor")
# Save data in RDS format and load it
saveRDS(g_youtube_actor, file="youtube.rds")
g_youtube_actor_loaded = readRDS("youtube.rds")
undirected_youtubeActor <- as.undirected(youtubeActor$graph, mode="collapse")
imc_youtubeActor <- infomap.community(undirected_youtubeActor, nb.trials = 10)
View(imc_youtubeActor)
communityMembership_youtubeActor <- membership(imc_youtubeActor)
communityDistribution_youtubeActor <- summary(as.factor(communityMembership_youtubeActor))
communities_youtubeActor <- communities(imc_youtubeActor)
View(communities_youtubeActor)
communities_youtubeActor
communities_youtubeActor <- communities(imc_youtubeActor)
communityDistribution_youtubeActor
communityDistribution_youtubeActor
youtubeActor_Louvain <- cluster_louvain(undirected_youtubeActor, weights = NA)
communities(youtubeActor_Louvain)
sizes(youtubeActor_Louvain)
Louvain_table <- data.frame(youtubeActor_Louvain$membership, youtubeActor_Louvain$names)
head(Louvain_table)
plot(youtubeActor_Louvain, undirected_youtubeActor,
vertex.label = V(undirected_youtubeActor)$name,
vertex.size=4, vertex.label.cex=0.7)
write.graph(undirected_youtubeActor,"undirected_youtubeActor.graphml",format="graphml")
plot(youtubeActor_Louvain, undirected_youtubeActor,
vertex.label = V(undirected_youtubeActor)$id)
youtubeActor_Louvain <- cluster_louvain(undirected_youtubeActor, weights = NA)
communities(youtubeActor_Louvain)
sizes(youtubeActor_Louvain)
#Louvain_table <- data.frame(youtubeActor_Louvain$membership, youtubeActor_Louvain$names)
#head(Louvain_table)
#plot(youtubeActor_Louvain, undirected_youtubeActor,
#    vertex.label = V(undirected_youtubeActor)$name,
#    vertex.size=4, vertex.label.cex=0.7)
plot(youtubeActor_Louvain, undirected_youtubeActor,
vertex.label = V(undirected_youtubeActor)$id)
youtubeActor_EdgeBetween <- cluster_edge_betweenness(undirected_youtubeActor)
communities(youtubeActor_EdgeBetween)
sizes(youtubeActor_EdgeBetween)
EdgeBetween_table <- data.frame(youtubeActor_EdgeBetween$membership, youtubeActor_EdgeBetween$names)
head(EdgeBetween_table)
plot(youtubeActor_EdgeBetween, undirected_youtubeActor,
vertex.label = V(undirected_youtubeActor)$name,
vertex.size=4, vertex.label.cex=0.7)
is_hierarchical(youtubeActor_EdgeBetween)
as.dendrogram(youtubeActor_EdgeBetween)
#plot_dendrogram(youtubeActor_EdgeBetween,mode="dendrogram",xlim=c(1,20))
plot_dendrogram(youtubeActor_EdgeBetween)
is_hierarchical(youtubeActor_EdgeBetween)
as.dendrogram(youtubeActor_EdgeBetween)
plot_dendrogram(youtubeActor_EdgeBetween,mode="dendrogram",xlim=c(1,20))
write.graph(undirected_youtubeActor,"undirected_youtubeActor.graphml",format="graphml")
# Import packages and libraries
pkgs <- c('igraph', 'magrittr', 'tuber', 'Rspotify', 'vosonSML')
lapply(pkgs, library, character.only = TRUE)
# Youtube API Credentials and Authenticate
apiKey <- 'AIzaSyC7X31Uj8_xPnE8whKL-MoPMVqg14ap_Jg'
appID <- '597183295495-770rn2a1n9i7f3nt4kdtkbt2i47ivr96.apps.googleusercontent.com'
appSecret <- 'C2jeBjDQKZ5CChavf4LFSiC6'
yt_oauth(appID, appSecret)
# Start search and collect some YT data
searchResult <- yt_search("DNCE")
View(searchResult)
# Create Actor nework
# Get first 10 video from the search results
#####   2.1) YouTube views/likes
videoIDs <- as.vector(searchResult$video_id[1:10])
videoState = lapply(videoIDs, function(x){
get_stats(video_id = x)
})
videoState = do.call(rbind.data.frame, videoState)
g_youtube_actor <- Authenticate("youtube", apiKey= apiKey) %>%
Collect(videoIDs = videoIDs, writeToFile=TRUE, verbose=TRUE, maxComments = 500)
pkgs <- c('igraph', 'magrittr', 'tuber', 'Rspotify', 'vosonSML')
lapply(pkgs, library, character.only = TRUE)
# Youtube API Credentials and Authenticate
apiKey <- 'AIzaSyC7X31Uj8_xPnE8whKL-MoPMVqg14ap_Jg'
appID <- '597183295495-770rn2a1n9i7f3nt4kdtkbt2i47ivr96.apps.googleusercontent.com'
appSecret <- 'C2jeBjDQKZ5CChavf4LFSiC6'
yt_oauth(appID, appSecret)
View(searchResult)
videoIDs <- as.vector(searchResult$video_id[1:10])
attach(undirected_youtubeActor)
pdf("C:\1.pdf")
undirected_youtubeActor <- as.undirected(youtubeActor$graph, mode="collapse")
imc_youtubeActor <- infomap.community(undirected_youtubeActor, nb.trials = 10)
searchResult <- yt_search("charlie puth")
videoIDs <- as.vector(searchResult$video_id[1:10])
videoState = lapply(videoIDs, function(x){
get_stats(video_id = x)
})
videoState = do.call(rbind.data.frame, videoState)
g_youtube_actor <- Authenticate("youtube", apiKey= apiKey) %>%
Collect(videoIDs = videoIDs, writeToFile=TRUE, verbose=TRUE, maxComments = 500)
View(g_youtube_actor)
youtubeActor <- g_youtube_actor %>% Create("actor")
# Save data in RDS format and load it
saveRDS(g_youtube_actor, file="youtube.rds")
g_youtube_actor_loaded = readRDS("youtube.rds")
# Run Community Detection based on user activity
undirected_youtubeActor <- as.undirected(youtubeActor$graph, mode="collapse")
imc_youtubeActor <- infomap.community(undirected_youtubeActor, nb.trials = 10)
communityMembership_youtubeActor <- membership(imc_youtubeActor)
communityDistribution_youtubeActor <- summary(as.factor(communityMembership_youtubeActor))
communityDistribution_youtubeActor
# List members of each community
communities_youtubeActor <- communities(imc_youtubeActor)
length(communities_youtubeActor)
tail(sort(communityDistribution_youtubeActor), n=5)
communities_youtubeActor[names(tail(sort(
communityDistribution_youtubeActor), n=5))]
youtubeActor_Louvain <- cluster_louvain(undirected_youtubeActor, weights = NA)
communities(youtubeActor_Louvain)
sizes(youtubeActor_Louvain)
attach(undirected_youtubeActor)
pdf("C:\1.pdf")
plot(youtubeActor_Louvain, undirected_youtubeActor,
vertex.label = V(undirected_youtubeActor)$name,
vertex.size=4, vertex.label.cex=0.7)
plot(youtubeActor_Louvain, undirected_youtubeActor,
vertex.label = V(undirected_youtubeActor)$name,
vertex.size=4, vertex.label.cex=1)
plot(youtubeActor_Louvain, undirected_youtubeActor,
vertex.label = V(undirected_youtubeActor)$name,
vertex.size=4, vertex.label.cex=0.5)
youtubeActor_EdgeBetween <- cluster_edge_betweenness(undirected_youtubeActor)
communities(youtubeActor_EdgeBetween)
sizes(youtubeActor_EdgeBetween)
EdgeBetween_table <- data.frame(youtubeActor_EdgeBetween$membership, youtubeActor_EdgeBetween$names)
head(EdgeBetween_table)
plot(youtubeActor_EdgeBetween, undirected_youtubeActor,
vertex.label = V(undirected_youtubeActor)$name,
vertex.size=4, vertex.label.cex=0.7)
is_hierarchical(youtubeActor_EdgeBetween)
as.dendrogram(youtubeActor_EdgeBetween)
plot_dendrogram(youtubeActor_EdgeBetween,mode="dendrogram",xlim=c(1,10))
is_hierarchical(youtubeActor_EdgeBetween)
as.dendrogram(youtubeActor_EdgeBetween)
plot_dendrogram(youtubeActor_EdgeBetween,mode="dendrogram",xlim=c(1,30))
is_hierarchical(youtubeActor_EdgeBetween)
as.dendrogram(youtubeActor_EdgeBetween)
plot_dendrogram(youtubeActor_EdgeBetween,mode="dendrogram",xlim=c(1,50))
is_hierarchical(youtubeActor_EdgeBetween)
as.dendrogram(youtubeActor_EdgeBetween)
#plot_dendrogram(youtubeActor_EdgeBetween,mode="dendrogram",xlim=c(1,50))
plot_dendrogram(youtubeActor_EdgeBetween)
is_hierarchical(youtubeActor_EdgeBetween)
as.dendrogram(youtubeActor_EdgeBetween)
plot_dendrogram(youtubeActor_EdgeBetween,mode="dendrogram",xlim=c(1,20))
searchResult <- yt_search("DNCE")
View(searchResult)
# Create Actor nework
# Get first 10 video from the search results
#####   2.1) YouTube views/likes
videoIDs <- as.vector(searchResult$video_id[1:10])
videoState = lapply(videoIDs, function(x){
get_stats(video_id = x)
})
videoState = do.call(rbind.data.frame, videoState)
g_youtube_actor <- Authenticate("youtube", apiKey= apiKey) %>%
Collect(videoIDs = videoIDs, writeToFile=TRUE, verbose=TRUE, maxComments = 500)
View(g_youtube_actor)
youtubeActor <- g_youtube_actor %>% Create("actor")
# Save data in RDS format and load it
saveRDS(g_youtube_actor, file="youtube.rds")
g_youtube_actor_loaded = readRDS("youtube.rds")
# Run Community Detection based on user activity
undirected_youtubeActor <- as.undirected(youtubeActor$graph, mode="collapse")
imc_youtubeActor <- infomap.community(undirected_youtubeActor, nb.trials = 10)
# Summarize User distribution
communityMembership_youtubeActor <- membership(imc_youtubeActor)
communityDistribution_youtubeActor <- summary(as.factor(communityMembership_youtubeActor))
communityDistribution_youtubeActor
communities_youtubeActor <- communities(imc_youtubeActor)
length(communities_youtubeActor)
tail(sort(communityDistribution_youtubeActor), n=5)
communities_youtubeActor[names(tail(sort(
communityDistribution_youtubeActor), n=5))]
youtubeActor_Louvain <- cluster_louvain(undirected_youtubeActor, weights = NA)
communities(youtubeActor_Louvain)
sizes(youtubeActor_Louvain)
#Louvain_table <- data.frame(youtubeActor_Louvain$membership, youtubeActor_Louvain$names)
#head(Louvain_table)
plot(youtubeActor_Louvain, undirected_youtubeActor,
vertex.label = V(undirected_youtubeActor)$name,
vertex.size=4, vertex.label.cex=0.7)
plot(youtubeActor_Louvain, undirected_youtubeActor,
vertex.label = V(undirected_youtubeActor)$name,
vertex.size=4, vertex.label.cex=0.7)
youtubeActor_EdgeBetween <- cluster_edge_betweenness(undirected_youtubeActor)
communities(youtubeActor_EdgeBetween)
sizes(youtubeActor_EdgeBetween)
EdgeBetween_table <- data.frame(youtubeActor_EdgeBetween$membership, youtubeActor_EdgeBetween$names)
head(EdgeBetween_table)
plot(youtubeActor_EdgeBetween, undirected_youtubeActor,
vertex.label = V(undirected_youtubeActor)$name,
vertex.size=4, vertex.label.cex=0.7)
is_hierarchical(youtubeActor_EdgeBetween)
as.dendrogram(youtubeActor_EdgeBetween)
#plot_dendrogram(youtubeActor_EdgeBetween,mode="dendrogram",xlim=c(1,20))
plot_dendrogram(youtubeActor_EdgeBetween)
searchResult <- yt_search("ZAYN")
View(searchResult)
# Create Actor nework
# Get first 10 video from the search results
#####   2.1) YouTube views/likes
videoIDs <- as.vector(searchResult$video_id[1:10])
videoState = lapply(videoIDs, function(x){
get_stats(video_id = x)
})
videoState = do.call(rbind.data.frame, videoState)
g_youtube_actor <- Authenticate("youtube", apiKey= apiKey) %>%
Collect(videoIDs = videoIDs, writeToFile=TRUE, verbose=TRUE, maxComments = 500)
View(g_youtube_actor)
youtubeActor <- g_youtube_actor %>% Create("actor")
# Save data in RDS format and load it
saveRDS(g_youtube_actor, file="youtube.rds")
g_youtube_actor_loaded = readRDS("youtube.rds")
# Run Community Detection based on user activity
undirected_youtubeActor <- as.undirected(youtubeActor$graph, mode="collapse")
imc_youtubeActor <- infomap.community(undirected_youtubeActor, nb.trials = 10)
# Summarize User distribution
communityMembership_youtubeActor <- membership(imc_youtubeActor)
communityDistribution_youtubeActor <- summary(as.factor(communityMembership_youtubeActor))
communityDistribution_youtubeActor
View(imc_youtubeActor)
communities_youtubeActor <- communities(imc_youtubeActor)
length(communities_youtubeActor)
tail(sort(communityDistribution_youtubeActor), n=5)
communities_youtubeActor[names(tail(sort(
communityDistribution_youtubeActor), n=5))]
# Hierarchical Community Detection (Louvain)
youtubeActor_Louvain <- cluster_louvain(undirected_youtubeActor, weights = NA)
communities(youtubeActor_Louvain)
sizes(youtubeActor_Louvain)
plot(youtubeActor_Louvain, undirected_youtubeActor,
vertex.label = V(undirected_youtubeActor)$name,
vertex.size=4, vertex.label.cex=0.7)
youtubeActor_EdgeBetween <- cluster_edge_betweenness(undirected_youtubeActor)
communities(youtubeActor_EdgeBetween)
sizes(youtubeActor_EdgeBetween)
EdgeBetween_table <- data.frame(youtubeActor_EdgeBetween$membership, youtubeActor_EdgeBetween$names)
head(EdgeBetween_table)
plot(youtubeActor_EdgeBetween, undirected_youtubeActor,
vertex.label = V(undirected_youtubeActor)$name,
vertex.size=4, vertex.label.cex=0.7)
write.graph(undirected_youtubeActor,"undirected_youtubeActor.graphml",format="graphml")
is_hierarchical(youtubeActor_EdgeBetween)
as.dendrogram(youtubeActor_EdgeBetween)
#plot_dendrogram(youtubeActor_EdgeBetween,mode="dendrogram",xlim=c(1,20))
plot_dendrogram(youtubeActor_EdgeBetween)
searchResult <- yt_search("DNCE")
View(searchResult)
# Create Actor nework
# Get first 10 video from the search results
#####   2.1) YouTube views/likes
videoIDs <- as.vector(searchResult$video_id[1:10])
videoState = lapply(videoIDs, function(x){
get_stats(video_id = x)
})
videoState = do.call(rbind.data.frame, videoState)
g_youtube_actor <- Authenticate("youtube", apiKey= apiKey) %>%
Collect(videoIDs = videoIDs, writeToFile=TRUE, verbose=TRUE, maxComments = 500)
View(g_youtube_actor)
youtubeActor <- g_youtube_actor %>% Create("actor")
# Save data in RDS format and load it
saveRDS(g_youtube_actor, file="youtube.rds")
g_youtube_actor_loaded = readRDS("youtube.rds")
# Run Community Detection based on user activity
undirected_youtubeActor <- as.undirected(youtubeActor$graph, mode="collapse")
imc_youtubeActor <- infomap.community(undirected_youtubeActor, nb.trials = 10)
# Summarize User distribution
communityMembership_youtubeActor <- membership(imc_youtubeActor)
communityDistribution_youtubeActor <- summary(as.factor(communityMembership_youtubeActor))
communityDistribution_youtubeActo
# Summarize User distribution
communityMembership_youtubeActor <- membership(imc_youtubeActor)
communityDistribution_youtubeActor <- summary(as.factor(communityMembership_youtubeActor))
communityDistribution_youtubeActor
searchResult <- yt_search("#charlieputh")
View(searchResult)
# Create Actor nework
# Get first 10 video from the search results
#####   2.1) YouTube views/likes
videoIDs <- as.vector(searchResult$video_id[1:10])
videoState = lapply(videoIDs, function(x){
get_stats(video_id = x)
})
videoState = do.call(rbind.data.frame, videoState)
g_youtube_actor <- Authenticate("youtube", apiKey= apiKey) %>%
Collect(videoIDs = videoIDs, writeToFile=TRUE, verbose=TRUE, maxComments = 500)
View(g_youtube_actor)
youtubeActor <- g_youtube_actor %>% Create("actor")
# Save data in RDS format and load it
saveRDS(g_youtube_actor, file="youtube.rds")
g_youtube_actor_loaded = readRDS("youtube.rds")
# Run Community Detection based on user activity
undirected_youtubeActor <- as.undirected(youtubeActor$graph, mode="collapse")
imc_youtubeActor <- infomap.community(undirected_youtubeActor, nb.trials = 10)
# Summarize User distribution
communityMembership_youtubeActor <- membership(imc_youtubeActor)
communityDistribution_youtubeActor <- summary(as.factor(communityMembership_youtubeActor))
communityDistribution_youtubeActor
communities_youtubeActor <- communities(imc_youtubeActor)
length(communities_youtubeActor)
tail(sort(communityDistribution_youtubeActor), n=5)
communities_youtubeActor[names(tail(sort(
communityDistribution_youtubeActor), n=5))]
# Hierarchical Community Detection (Louvain)
youtubeActor_Louvain <- cluster_louvain(undirected_youtubeActor, weights = NA)
communities(youtubeActor_Louvain)
sizes(youtubeActor_Louvain)
plot(youtubeActor_Louvain, undirected_youtubeActor,
vertex.label = V(undirected_youtubeActor)$name,
vertex.size=4, vertex.label.cex=0.7)
youtubeActor_EdgeBetween <- cluster_edge_betweenness(undirected_youtubeActor)
communities(youtubeActor_EdgeBetween)
sizes(youtubeActor_EdgeBetween)
EdgeBetween_table <- data.frame(youtubeActor_EdgeBetween$membership, youtubeActor_EdgeBetween$names)
head(EdgeBetween_table)
plot(youtubeActor_EdgeBetween, undirected_youtubeActor,
vertex.label = V(undirected_youtubeActor)$name,
vertex.size=4, vertex.label.cex=0.7)
write.graph(undirected_youtubeActor,"undirected_youtubeActor.graphml",format="graphml")
is_hierarchical(youtubeActor_EdgeBetween)
as.dendrogram(youtubeActor_EdgeBetween)
#plot_dendrogram(youtubeActor_EdgeBetween,mode="dendrogram",xlim=c(1,20))
plot_dendrogram(youtubeActor_EdgeBetween)
is_hierarchical(youtubeActor_EdgeBetween)
as.dendrogram(youtubeActor_EdgeBetween)
plot_dendrogram(youtubeActor_EdgeBetween,mode="dendrogram",xlim=c(1,20))
searchResult <- yt_search("#viocenotes")
View(searchResult)
# Create Actor nework
# Get first 10 video from the search results
#####   2.1) YouTube views/likes
videoIDs <- as.vector(searchResult$video_id[1:10])
videoState = lapply(videoIDs, function(x){
get_stats(video_id = x)
})
videoState = do.call(rbind.data.frame, videoState)
g_youtube_actor <- Authenticate("youtube", apiKey= apiKey) %>%
Collect(videoIDs = videoIDs, writeToFile=TRUE, verbose=TRUE, maxComments = 500)
View(g_youtube_actor)
youtubeActor <- g_youtube_actor %>% Create("actor")
# Save data in RDS format and load it
saveRDS(g_youtube_actor, file="youtube.rds")
g_youtube_actor_loaded = readRDS("youtube.rds")
# Run Community Detection based on user activity
undirected_youtubeActor <- as.undirected(youtubeActor$graph, mode="collapse")
imc_youtubeActor <- infomap.community(undirected_youtubeActor, nb.trials = 10)
# Summarize User distribution
communityMembership_youtubeActor <- membership(imc_youtubeActor)
communityDistribution_youtubeActor <- summary(as.factor(communityMembership_youtubeActor))
communityDistribution_youtubeActor
pkgs <- c('igraph', 'magrittr', 'tuber', 'Rspotify', 'vosonSML')
lapply(pkgs, library, character.only = TRUE)
# Youtube API Credentials and Authenticate
apiKey <- 'AIzaSyC7X31Uj8_xPnE8whKL-MoPMVqg14ap_Jg'
appID <- '597183295495-770rn2a1n9i7f3nt4kdtkbt2i47ivr96.apps.googleusercontent.com'
appSecret <- 'C2jeBjDQKZ5CChavf4LFSiC6'
yt_oauth(appID, appSecret)
# Start search and collect some YT data
searchResult <- yt_search("#viocenotes")
View(searchResult)
# Create Actor nework
# Get first 10 video from the search results
#####   2.1) YouTube views/likes
videoIDs <- as.vector(searchResult$video_id[1:10])
videoState = lapply(videoIDs, function(x){
get_stats(video_id = x)
})
videoState = do.call(rbind.data.frame, videoState)
g_youtube_actor <- Authenticate("youtube", apiKey= apiKey) %>%
Collect(videoIDs = videoIDs, writeToFile=TRUE, verbose=TRUE, maxComments = 500)
View(g_youtube_actor)
youtubeActor <- g_youtube_actor %>% Create("actor")
# Save data in RDS format and load it
saveRDS(g_youtube_actor, file="youtube.rds")
g_youtube_actor_loaded = readRDS("youtube.rds")
# Run Community Detection based on user activity
undirected_youtubeActor <- as.undirected(youtubeActor$graph, mode="collapse")
imc_youtubeActor <- infomap.community(undirected_youtubeActor, nb.trials = 10)
# Summarize User distribution
communityMembership_youtubeActor <- membership(imc_youtubeActor)
communityDistribution_youtubeActor <- summary(as.factor(communityMembership_youtubeActor))
communityDistribution_youtubeActor
searchResult <- yt_search("#viocenotes")
apiKey <- 'AIzaSyC7X31Uj8_xPnE8whKL-MoPMVqg14ap_Jg'
appID <- '597183295495-770rn2a1n9i7f3nt4kdtkbt2i47ivr96.apps.googleusercontent.com'
appSecret <- 'C2jeBjDQKZ5CChavf4LFSiC6'
yt_oauth(appID, appSecret)
searchResult <- yt_search("#viocenotes")
searchResultv <- yt_search("#viocenotes")
pkgs <- c('igraph', 'magrittr', 'tuber', 'Rspotify', 'vosonSML')
lapply(pkgs, library, character.only = TRUE)
# Youtube API Credentials and Authenticate
apiKey <- 'AIzaSyC7X31Uj8_xPnE8whKL-MoPMVqg14ap_Jg'
appID <- '597183295495-770rn2a1n9i7f3nt4kdtkbt2i47ivr96.apps.googleusercontent.com'
appSecret <- 'C2jeBjDQKZ5CChavf4LFSiC6'
yt_oauth(appID, appSecret)
searchResult <- yt_search("#viocenotes")
pkgs <- c('igraph', 'magrittr', 'tuber', 'Rspotify', 'vosonSML')
lapply(pkgs, library, character.only = TRUE)
# Youtube API Credentials and Authenticate
apiKey <- 'AIzaSyC7X31Uj8_xPnE8whKL-MoPMVqg14ap_Jg'
appID <- '597183295495-770rn2a1n9i7f3nt4kdtkbt2i47ivr96.apps.googleusercontent.com'
appSecret <- 'C2jeBjDQKZ5CChavf4LFSiC6'
yt_oauth(appID, appSecret)
searchResult <- yt_search("#viocenotes")
pkgs <- c('igraph', 'magrittr', 'tuber', 'Rspotify', 'vosonSML')
lapply(pkgs, library, character.only = TRUE)
# Youtube API Credentials and Authenticate
apiKey <- 'AIzaSyC7X31Uj8_xPnE8whKL-MoPMVqg14ap_Jg'
appID <- '597183295495-770rn2a1n9i7f3nt4kdtkbt2i47ivr96.apps.googleusercontent.com'
appSecret <- 'C2jeBjDQKZ5CChavf4LFSiC6'
yt_oauth(appID, appSecret)
searchResult <- yt_search("charlie puth")
View(searchResult)
g_youtube_actor <- Authenticate("youtube", apiKey= apiKey) %>%
Collect(videoIDs = videoIDs, writeToFile=TRUE, verbose=TRUE, maxComments = 500)
View(g_youtube_actor)
youtubeActor <- g_youtube_actor %>% Create("actor")
# Save data in RDS format and load it
saveRDS(g_youtube_actor, file="youtube.rds")
g_youtube_actor_loaded = readRDS("youtube.rds")
undirected_youtubeActor <- as.undirected(youtubeActor$graph, mode="collapse")
imc_youtubeActor <- infomap.community(undirected_youtubeActor, nb.trials = 10)
communityMembership_youtubeActor <- membership(imc_youtubeActor)
communityDistribution_youtubeActor <- summary(as.factor(communityMembership_youtubeActor))
communityDistribution_youtubeActor
communities_youtubeActor <- communities(imc_youtubeActor)
length(communities_youtubeActor)
tail(sort(communityDistribution_youtubeActor), n=5)
communities_youtubeActor[names(tail(sort(
communityDistribution_youtubeActor), n=5))]
youtubeActor_Louvain <- cluster_louvain(undirected_youtubeActor, weights = NA)
communities(youtubeActor_Louvain)
sizes(youtubeActor_Louvain)
write.graph(undirected_youtubeActor,"undirected_youtubeActorcp.graphml",format="graphml")
youtubeActor_EdgeBetween <- cluster_edge_betweenness(undirected_youtubeActor)
communities(youtubeActor_EdgeBetween)
sizes(youtubeActor_EdgeBetween)
is_hierarchical(youtubeActor_EdgeBetween)
as.dendrogram(youtubeActor_EdgeBetween)
plot_dendrogram(youtubeActor_EdgeBetween,mode="dendrogram",xlim=c(1,20))
youtube <- readRDS("E:/Griffith University/4030BigData/milestone2_charlieputh/youtube.rds")
