# Import packages and libraries

pkgs <- c('igraph', 'magrittr', 'tuber', 'Rspotify', 'vosonSML')
lapply(pkgs, library, character.only = TRUE)


# Youtube API Credentials and Authenticate

apiKey <- 'AIzaSyC7X31Uj8_xPnE8whKL-MoPMVqg14ap_Jg'
appID <- '597183295495-770rn2a1n9i7f3nt4kdtkbt2i47ivr96.apps.googleusercontent.com'
appSecret <- 'C2jeBjDQKZ5CChavf4LFSiC6'

yt_oauth(appID, appSecret)


# Start search and collect some YT data

searchResult <- yt_search("charlie puth")
View(searchResult)

# Create Actor nework
# Get first 10 video from the search results
#####   2.1) YouTube views/likes
videoIDs <- as.vector(searchResult$video_id[1:10])

videoState = lapply(videoIDs, function(x){
  get_stats(video_id = x)
})

videoState = do.call(rbind.data.frame, videoState)

g_youtube_actor <- Authenticate("youtube", apiKey= apiKey) %>%
  Collect(videoIDs = videoIDs, writeToFile=TRUE, verbose=TRUE, maxComments = 500)
View(g_youtube_actor)

youtubeActor <- g_youtube_actor %>% Create("actor")


# Save data in RDS format and load it
saveRDS(g_youtube_actor, file="youtube.rds")
g_youtube_actor_loaded = readRDS("youtube.rds")


# Run Community Detection based on user activity

undirected_youtubeActor <- as.undirected(youtubeActor$graph, mode="collapse")
imc_youtubeActor <- infomap.community(undirected_youtubeActor, nb.trials = 10)

# Summarize User distribution
communityMembership_youtubeActor <- membership(imc_youtubeActor)
communityDistribution_youtubeActor <- summary(as.factor(communityMembership_youtubeActor))
communityDistribution_youtubeActor

# List members of each community

communities_youtubeActor <- communities(imc_youtubeActor)
length(communities_youtubeActor)
tail(sort(communityDistribution_youtubeActor), n=5)
communities_youtubeActor[names(tail(sort(
  communityDistribution_youtubeActor), n=5))]


# Hierarchical Community Detection (Louvain)

youtubeActor_Louvain <- cluster_louvain(undirected_youtubeActor, weights = NA)
communities(youtubeActor_Louvain)
sizes(youtubeActor_Louvain)

#Louvain_table <- data.frame(youtubeActor_Louvain$membership, youtubeActor_Louvain$names)
#head(Louvain_table)
plot(youtubeActor_Louvain, undirected_youtubeActor, 
    vertex.label = V(undirected_youtubeActor)$name,
    vertex.size=4, vertex.label.cex=0.7)

write.graph(undirected_youtubeActor,"undirected_youtubeActor.graphml",format="graphml")

# Hierarchical Community Detection (Edge Betweenness)

youtubeActor_EdgeBetween <- cluster_edge_betweenness(undirected_youtubeActor)
communities(youtubeActor_EdgeBetween)
sizes(youtubeActor_EdgeBetween)

EdgeBetween_table <- data.frame(youtubeActor_EdgeBetween$membership, youtubeActor_EdgeBetween$names)
head(EdgeBetween_table)
plot(youtubeActor_EdgeBetween, undirected_youtubeActor, 
     vertex.label = V(undirected_youtubeActor)$name,
     vertex.size=4, vertex.label.cex=0.7)

write.graph(undirected_youtubeActor,"undirected_youtubeActor.graphml",format="graphml")

is_hierarchical(youtubeActor_EdgeBetween)
as.dendrogram(youtubeActor_EdgeBetween)
#plot_dendrogram(youtubeActor_EdgeBetween,mode="dendrogram",xlim=c(1,20))
plot_dendrogram(youtubeActor_EdgeBetween)